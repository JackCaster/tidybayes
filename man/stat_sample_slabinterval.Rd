% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_sample_slabinterval.R
\name{stat_sample_slabinterval}
\alias{stat_sample_slabinterval}
\alias{stat_halfeye}
\alias{stat_halfeyeh}
\alias{stat_eye}
\alias{stat_eyeh}
\alias{stat_ccdfbar}
\alias{stat_ccdfbarh}
\alias{stat_cdfbar}
\alias{stat_cdfbarh}
\title{Distribution + interval plots (eye plots, half-eye plots, CCDF barplots, etc) for samples (ggplot stat)}
\usage{
stat_sample_slabinterval(mapping = NULL, data = NULL,
  geom = "slabinterval", position = "identity", ...,
  slab_type = c("pdf", "cdf", "ccdf"), adjust = 1, trim = TRUE,
  orientation = c("vertical", "horizontal"), limits = NULL, n = 501,
  interval_function = NULL, interval_args = list(),
  point_interval = median_qi, .width = c(0.66, 0.95), na.rm = FALSE,
  show.legend = c(size = FALSE), inherit.aes = TRUE)

stat_halfeye(...)

stat_halfeyeh(..., orientation = "horizontal")

stat_eye(..., side = "both")

stat_eyeh(..., side = "both", orientation = "horizontal")

stat_ccdfbar(..., slab_type = "ccdf", justification = 0.5,
  side = "left", normalize = "none")

stat_ccdfbarh(..., slab_type = "ccdf", justification = 0.5,
  side = "top", orientation = "horizontal", normalize = "none")

stat_cdfbar(..., slab_type = "cdf", justification = 0.5,
  side = "left", normalize = "none")

stat_cdfbarh(..., slab_type = "cdf", justification = 0.5,
  side = "top", orientation = "horizontal", normalize = "none")
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}} or
\code{\link[=aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[=ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[=fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{Use to override the default connection between
\code{stat_slabinterval} and \code{\link{geom_slabinterval}}}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed to \code{\link{layer}}. They may also be arguments to the paired geom
(e.g., \code{\link{geom_pointinterval}})}

\item{slab_type}{The type of slab function to calculate: probability density (or mass) function (\code{"pdf"}),
cumulative distribution function (\code{"cdf"}), or complementary CDF (\code{"ccdf"}).}

\item{adjust}{If \code{slab_type} is \code{"pdf"}, bandwidth for the density estimator is adjusted by multiplying it
by this value. See \code{\link{density}} for more information.}

\item{trim}{If \code{slab_type} is \code{"pdf"}, should the density estimate be trimmed to the range of the
input data? Default \code{TRUE}.}

\item{orientation}{Whether this geom is drawn horizontally (\code{"horizontal"}) or
vertically (\code{"vertical"}). When horizontal (resp. vertical), the geom uses the \code{y} (resp. \code{x})
aesthetic to identify different groups, then for each group uses the \code{x} (resp. \code{y}) aesthetic and the
\code{thickness} aesthetic to draw a function as an slab, and draws points and intervals horizontally
(resp. vertically) using the \code{xmin}, \code{x}, and \code{xmax} (resp. \code{ymin}, \code{y}, and \code{ymax})
aesthetics.}

\item{limits}{Limits for \code{slab_function}, as a vector of length two. These limits are combined with those
computed by the \code{limits_function} as well as the limits defined by the scales of the plot to determine the
limits used to draw the slab functions: these limits specify the maximal limits; i.e., if specified, the limits
will not be wider than these (but may be narrower). Use \code{NA} to leave a limit alone; e.g.
\code{limits = c(0, NA)} will ensure that the lower limit does not go below 0.}

\item{n}{Number of points at which to evaluate \code{slab_function}}

\item{interval_function}{Custom function for generating intervals (for most common use cases the \code{point_interval}
argument will be easier to use). This function takes a data frame of aesthetics and a \code{.width} parameter (a vector
of interval widths), and returns a data frame with
columns \code{.width} (from the \code{.width} vector), \code{.value} (point summary) and \code{.lower} and \code{.upper}
(endpoints of the inverals, given the \code{.width}). Output will be converted to the appropriate \code{x}- or
\code{y}-based aesthetics depending on the value of \code{orientation}. If \code{interval_function} is \code{NULL},
\code{point_interval} is used instead.}

\item{interval_args}{Additional arguments passed to \code{interval_function} or \code{point_interval}.}

\item{point_interval}{A function from the \code{\link{point_interval}} family (e.g., \code{median_qi},
\code{mean_qi}, etc). This function should take in a vector of value, and should obey the
\code{.width} and \code{.simple_names} parameters of \code{\link{point_interval}} functions, such that when given
a vector with \code{.simple_names = TRUE} should return a data frame with variables \code{.value}, \code{.lower},
\code{.upper}, and \code{.width}. Output will be converted to the appropriate \code{x}- or \code{y}-based aesthetics
depending on the value of \code{orientation}. See the \code{\link{point_interval}} family of functions for
more information.}

\item{.width}{The \code{.width} argument passed to \code{interval_function} or \code{point_interval}.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with a warning. If \code{TRUE}, missing
values are silently removed.}

\item{show.legend}{Should this layer be included in the legends? Default is \code{c(size = FALSE)}, unlike most geoms,
to match its common use cases. \code{FALSE} hides all legends, \code{TRUE} shows all legends, and \code{NA} shows only
those that are mapped (the default for most geoms).}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[=borders]{borders()}}.}

\item{side}{Which side to draw the slab on. \code{"topright"}, \code{"top"}, and \code{"right"} are synonyms
which cause the slab to be drawn on the top or the right depending on if \code{orientation} is \code{"horizontal"}
or \code{"vertical"}. \code{"bottomleft"}, \code{"bottom"}, and \code{"left"} are synonyms which cause the slab
to be drawn on the bottom of the left depending on if \code{orientation} is \code{"horizontal"} or
\code{"vertical"}. \code{"both"} draws the slab mirrored on both sides (as in a violin plot).}

\item{justification}{Justification of the interval relative to the slab, where \code{0} indicates bottom/left
justification and \code{1} indicates top/right justification (depending on \code{orientation}). If \code{justification}
is \code{NULL} (the default), then it is set automatically based on the value of \code{side}: when \code{side} is
\code{"top"}/\code{"right"} \code{justification} is set to \code{0}, when \code{side} is \code{"bottom"}/\code{"left"}
\code{justification} is set to \code{1}, and when \code{side} is \code{"both"} \code{justification} is set to
\code{0.5}.}

\item{normalize}{How to normalize heights of functions input to the \code{thickness} aesthetic. If \code{"max_height"}
(the default), normalize so that the maximum height across all data is \code{1}; if \code{"height"}, normalize within
groups so that the maximum height in each group is \code{1}; if \code{"none"}, values are taken as is with no
 normalization (this should probably only be used with functions whose values are in [0,1]).}
}
\description{
Stats for computing densities and CDFs + intervals from samples for use with
\code{\link{geom_slabinterval}}. Useful for creating eye plots, halfeye plots,
CCDF bar plots etc.
}
\details{
A highly configurable stat for generating a variety of plots that combine a "slab"
that summarizes a sample plus an interval. Several "shortcut" stats are provided
which combine multiple options to create useful geoms, particularly \emph{eye} plots
(a combination of a violin plot and interval), \emph{half-eye} plots (a density plus interval),
and \emph{CCDF bar plots} (a complementary CDF plus interval). These can be
handy for visualizing posterior distributions in Bayesian inference, amongst other things.

The shortcut stat names follow the pattern \code{stat_[name][h|]}, where the trailing
\code{h} (if present) indicates the horizontal version of the stat.

Stats include:

\itemize{
  \item \code{stat_eye} / \code{stat_eyeh}: Eye plots (violin + interval)
  \item \code{stat_halfeye} / \code{stat_halfeyeh}: Half-eye plots (density + interval)
  \item \code{stat_ccdfbar} / \code{stat_ccdfbarh}: CCDF bar plots (CCDF + interval)
  \item \code{stat_cdfbar} / \code{stat_cdfbarh}: CDF bar plots (CDF + interval)
}
}
\examples{

#TODO

}
\seealso{
See \code{\link{geom_slabinterval}} for more information on the geom these stats
use by default and some of the options they have. See \code{\link{stat_dist_slabinterval}}
for the versions of these stats that can be used on analytical distributions.
}
